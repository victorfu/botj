import { app, BrowserWindow, screen } from "electron";
import appState from "./state";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;
let imageWindow: BrowserWindow;

export function createWindow(): void {
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; connect-src 'self' https://firebasestorage.googleapis.com https://*.firebaseio.com https://*.googleapis.com; style-src 'self' 'unsafe-inline';",
          ],
        },
      });
    },
  );

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (!app.isPackaged) {
    mainWindow.webContents.openDevTools();
  }

  mainWindow.on("close", (event) => {
    if (!appState.isQuitting) {
      event.preventDefault();
      mainWindow.hide();
    }
  });
}

export function getMainWindow(): BrowserWindow {
  return mainWindow;
}

export function showMainWindow(): BrowserWindow {
  const mainWindow = getMainWindow();
  if (mainWindow.isVisible()) {
    mainWindow.focus();
  } else {
    mainWindow.show();
  }
  return mainWindow;
}

export function createImageWindow(dataURL: string) {
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width, height } = primaryDisplay.workAreaSize;

  imageWindow = new BrowserWindow({
    width,
    height,
    frame: false,
    fullscreen: true,
    autoHideMenuBar: true,
    transparent: true,
    webPreferences: {
      contextIsolation: true,
    },
  });

  imageWindow.loadURL(
    `data:text/html;charset=utf-8,
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Image Display</title>
        <style>
          body {
            margin: 0;
            padding: 0;
          }
          img {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            border: none;
          }
        </style>
      </head>
      <body>
        <img src="${dataURL}" />
      </body>
    </html>`,
  );

  imageWindow.on("maximize", () => {
    imageWindow.setSimpleFullScreen(true);
  });
}

export function getImageWindow(): BrowserWindow {
  return imageWindow;
}

export function isImageWindowOpen(): boolean {
  return imageWindow && !imageWindow.isDestroyed();
}

export function closeImageWindow() {
  if (imageWindow && !imageWindow.isDestroyed()) {
    imageWindow.close();
  }
}
